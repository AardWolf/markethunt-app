{% extends "base.twig" %}
{% block meta_description %}My Portfolio{% endblock %}
{% block title %}Portfolio{% endblock %}

{% block head %}
    {{ parent() }}
    {% if constant('APPENV') == 'prod' %}
        <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.29/vue.global.prod.min.js"></script>
    {% else %}
        <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.29/vue.global.js"></script>
    {% endif %}
    <script src="https://cdn.jsdelivr.net/npm/vue3-sfc-loader@0.8.4/dist/vue3-sfc-loader.js"></script>
    <script type="text/javascript" src="assets/js/setupVue.js"></script>
    <script type="text/javascript" src="assets/js/stores/portfolio.js"></script>

    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js"></script>
{% endblock %}

{% block body %}
    <div class="pure-g">
        <div class="pure-u-1 pure-u-xl-11-24">
            {% include 'chart/chartContainer.twig' %}
        </div>
        <div id="portfolio-container" class="pure-u-1 pure-u-xl-13-24 xl-vue-table-container">
        </div>
    </div>
    <div id="new-portfolio-dialog" style="display:none">
        <form id="new-portfolio-form" name="new-portfolio-form" class="pure-form pure-form-stacked">
            <fieldset>
                <label for="new-portfolio-name">Portfolio name <span class="required-indicator">*</span></label>
                <input style="width: 100%" type="text" id="new-portfolio-name" required pattern=".+" />
            </fieldset>
        </form>
    </div>
    {% include('toasts.twig') %}
    <script>
        /* main script block */
        // register new portfolio modal
        function newPortfolioModal(editPidx = null) {
            var dialog = $("#new-portfolio-dialog").dialog({
                dialogClass: 'themed-titlebar',
                title: editPidx !== null ? 'Edit portfolio' : 'Add new portfolio',
                draggable: false,
                autoOpen: false,
                // height: 280,
                // width: 350,
                modal: true,
                buttons: [
                    {
                        text: editPidx !== null ? "Save changes" : "Create portfolio",
                        id: "new-portfolio-confirm",
                        click: function() {
                            if (document.forms["new-portfolio-form"].reportValidity()) {
                                var newPortfolioName = $('#new-portfolio-name').val();
                                processNewPortfolioFormData(newPortfolioName, editPidx);
                                dialog.dialog("close");
                            }
                        },
                    },
                    {
                        text: "Cancel",
                        id: "new-portfolio-cancel",
                        click: function() {
                            dialog.dialog("close");
                        },
                    },
                ],
                open: function(event, ui) {
                    // click outside to close
                    $('.ui-widget-overlay').bind('click', function() {
                        dialog.dialog('close');
                    });

                    // override button classes
                    $('#new-portfolio-confirm').removeClass().addClass("pure-button pure-button-primary");
                    $('#new-portfolio-cancel').removeClass().addClass("pure-button");

                    // set up form and clear data from last use
                    if (editPidx !== null) {
                        $('#new-portfolio-name').val(appData.portfolios[editPidx].name);
                    } else {
                        $('#new-portfolio-name').val('');
                    }
                }
            });

            dialog.dialog("open");
        }

        function processNewPortfolioFormData(portfolioName, editPidx = null) {
            if (editPidx !== null) {
                appData.portfolios[editPidx].name = portfolioName;
            } else {
                appData.portfolios.push(newPortfolioObject(portfolioName));
                appData.redrawTabs = true; // set to true *after* modifying portfolio
            }

            setPortfolioObj(appData.portfolios);
        }

        // chart handling
        var initialJson = {{ initial_stock_data |raw }};
        renderChartWithItemId({{ current_item_id }}, "{{ current_item_name }}", initialJson);

        function handleChartSubmit(addToHistory = true) {
            var selector = document.getElementById('chartSelector');
            var itemId = selector.value;
            var itemName = selector.options[selector.selectedIndex].text;
            renderChartWithItemId(itemId, itemName);
            if (addToHistory === true) {
                window.history.replaceState({}, itemName, "/portfolio.php?item_id=" + itemId);
            }
        }

        function processNewPositionFormData(qty, mark, markType, pidx) {
            addToPortfolio(pidx, document.getElementById('chartSelector').value, mark, markType, qty)
        }

        function processPositionEdit(qty, mark, markType, pidx, idx, newPidx = null) {
            const portfolio = appData.portfolios[pidx];
            const position = portfolio.positions[idx];
            editPosition(portfolio.uid, position.uid, qty, mark);
        }

        // Generic add to portfolio
        function addToPortfolio(pidx, itemId, mark, markType, qty) {
            appData.portfolios[pidx].positions.push(newPortfolioPosition(itemId, qty, mark, markType));

            if (Number(itemId) === Number(document.getElementById('chartSelector').value)) {
                renderChartWithItemId(itemId, appData.itemData[itemId].name);
            }
        }

        // reload when other tab edits portfolio
        window.addEventListener('storage', (e) => {
            if (e.key == getPortfolioObjKey()) {
                window.location.reload();
            }
        });

        $.tablesorter.addParser({
            // set a unique id
            id: 'mixedMarkTypeParser',
            format: function(s, table, cell, cellIndex) {
                return cell.innerText;
            },
            // flag for filter widget (true = ALWAYS search parsed values; false = search cell text)
            parsed: false,
            // set type, either numeric or text
            type: 'text'
        });

        function mixedMarkTypeSorter(a, b, direction, column, table) {
            const a_val = Number(a.replace(/[^0-9.]/g, ''));
            const b_val = Number(b.replace(/[^0-9.]/g, ''));
            const a_type = a.includes('sb') ? 'sb' : 'gold';
            const b_type = b.includes('sb') ? 'sb' : 'gold';
            const sort_multiplier = direction ? 1 : -1;

            if (a_type === b_type) {
                return a_val - b_val;
            } else if (a_type === 'sb') {
                return -1 * sort_multiplier;
            } else {
                return 1 * sort_multiplier;
            }
        }

        function initTablesorter() {
            $(".table-sortable").tablesorter({
                headerTemplate: '{content}{icon}',
                cssIcon: 'ui-icon light-ui',
                cssIconNone: 'ui-icon-caret-2-n-s',
                cssIconAsc: 'ui-icon-caret-1-n',
                cssIconDesc: 'ui-icon-caret-1-s',
                cssIconDisabled: 'ui-icon-blank',
                //sortInitialOrder: 'desc', // not intuitive and causes confusion - do not enable
                sortList: [[0,0]], // initial sort by first column asc
                headers: {
                    2: {
                        sorter: 'mixedMarkTypeParser'
                    },
                    3: {
                        sorter: 'mixedMarkTypeParser'
                    },
                    4: {
                        sorter: 'mixedMarkTypeParser'
                    },
                },
                textSorter: {
                    2: mixedMarkTypeSorter,
                    3: mixedMarkTypeSorter,
                    4: mixedMarkTypeSorter,
                }
            });
        }

        /* vue script block */
        var portfoliosRaw = getPortfolioObj();

        const appData = reactive({
            itemData: itemData,
            portfolios: reactivePortfolio,
            redrawTabs: false,
        });

        const app = Vue.createApp({
            components: {
                PortfolioApp: Vue.defineAsyncComponent(() => loadModule('assets/js/components/PortfolioApp.vue', sfcLoaderOpts))
            },
            template: `<PortfolioApp></PortfolioApp>`,
        });

        app.mount("#portfolio-container");
    </script>
{% endblock %}